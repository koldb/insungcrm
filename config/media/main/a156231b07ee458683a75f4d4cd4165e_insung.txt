신규업체 등록
순번 / 업체명 필수 / 업체담당자 / 영업담당자 / 전화번호 필수 / 메일 필수 / 주소 / 웹사이트 / 등록일자 
db입력까지 완료


업체 목록
무한스크롤, 페이징 비교 / 조회 가능하도록 

고객 / 사원 / 관리자 급 권한부여 - 메뉴, 페이지 달라지게
주소 검색 기능 추가
무료 클라우드 서버 올려서 구동 가능한지 확인

주말 작업 예정 
1. 아이디별 레벨 설정하여 권한 차등 
방법 1. 코딩으로 짜서 가입시 권한 분배 
문제 : 가입시 선택을 해야한다
방법 2. 아이디는 만들어서 배분 
홈페이지에서 가입하는 것은 고객만 가능하도록
사내 직원과 관리자는 만들어서 아이디 배분
그럼 문제 해결가능
방법 3. 회원가입 부분 재구성
현재의 회원가입 방식 말고 폼을 다시 만들어서 새로 짜기

2. 업체 리스트 페이지 구현 + 임시 메인 페이지/메뉴 구현 - 입력, 목록, 임시메인,메뉴 완료
가입시 비밀번호 입력 최소4자리로 변경 
로그인, 로그아웃 기능 추가 / 로그인 여부로 회원가입 표출 여부 결정


3. 업체 리스트 sorting 구현 - 지금 불가능, 방법 탐색 중

4. 무료 클라우드 서버 탐색/테스트 운영 여부 확인 - 

회원가입 다시 짜기
userform 사용 말고 
직접 폼 짜서 넣기


4월 18일 회의
1. 리스트 작성시 sorting / 검색 기능 필요
2. 업체 로그인시 자기 업체꺼만 볼수있도록 -> 유저 db 수정해야하는지 방법이 있는지 확인 필요

아이디 등급으로 1차 걸르고 2차로 업체명으로 걸러서 업체명은 고유하게 가져오도록 -> 가져온 업체명으로만 검색되도록 하기

3. 기등록된 조회/선택하여 불러와 수정후 등록할수있도록 
4. 
큰 메뉴 
견적 문의(essheet) / 발주 관리 / 이력 관리 / AS 접수 / 기타 문의

견적 문의 항목
고객 접수 일자 / 견적 회신 완료 일자 / 견적서 업로드, 다운로드 / 제품명 / 수량 / 개당 단가 / 총 금액 / 신규, 기존 구분 


4월 19일 할것
1.아이디에 따른 표출 메뉴 변경(세션 활용)
접속 아이디에 따라 crm/scm 메뉴 달라지도록 구현(보충 필요)
2.견적 입력 db 구상중


scm은 app isscm 에 urls / view / model / form 가져가고
base2.html 로 따로 가져가기 / 접속 주소로 구분하여 입장
base2에 큰 메뉴  넣기

제품명 / 수량 / 개당 가격 / 업체명 / 비고

4월 19일 회의
1. 클라우드 서비스 탐색 / 25일(다음주 월)까지 결정 회신
2. 사업자번호 / 견적서 샘플 받음 -> 업체 정보 샘플에 맞추어 db 정리
3. DB / 시스템 운영 설정서 문서화 틈틈히
4. 목요일(21일)까지 견적 접수(고객) / 견적 업데이트(직원) / 견적 리스트 작업 완료하기

4월 20일 할것
1. DB 관계도 재정립 - DB 수정 중 
2. 업체 정보 DB 입력
3. 

비고 / 파일 업로드 따로  텍스트 입력 폼과 업로드 폼

파일업로드 db
순번 / 파일 이름 / 파일 / 업로드 일자 / 업로드 업체 이름
no 와 cname 이 같을경우 업로드 파일들 보이도록

업체이름으로 FK 아니면 거래처코드(이게 나을듯)
유저 정보 - 업체 db - 견적 입력 - 업체 입력

업체정보 DB
순번	거래처코드	거래처명	대표자명	전화번호	Email	담당자명    등록일자
no	ccode	cname	owner	cphone	cemail	smanager  rg_date



no, rg_date, rp_date, product_name, quantity, per_price, total_price, new_old, business_number, cname, memo

21일 할것
1. 리스트 정렬 / 검색 기능 추가
2. 디테일 페이지 생성 / 업데이트 추가


4월 21일 작업
1. 견적 접수건에 대하여 파일 업로드 / 다운로드 가능 
2. 로그인 된 아이디에 따라 해당 업체 접수건, 파일만 볼 수 있음.
3. 견적 디테일 뷰 페이지 완료 - 디테일 뷰에서 파일 업로드, 다운로드 가능하도록 변경
4. 견적 접수건 응대 페이지 구현 -> 날짜 지정 안 할 경우 에러 발생 / 수정 중


금일 업무 내용 
1. 견적 접수건에 대하여 파일 업로드 / 다운로드 가능 
2. 로그인 된 아이디에 따라 해당 업체 접수건, 파일만 볼 수 있음.
3. 견적 디테일 뷰 페이지 완료 - 디테일 뷰에서 파일 업로드, 다운로드 가능하도록 변경
4. 견적 접수건 응대(수정) 페이지 구현 -> 날짜 지정 안 할 경우 에러 발생 / 수정 중
 -> 에러  수정 완료 + 종결 여부 입력란 추가 
5. 견적 접수건 삭제 기능 추가

내일할거 
1. 로그인 안하면 메뉴 이동 못하게 + 로그인 데코레이션 개념잡기
2. 추가 기능 구상
3. 클라우드 서버 테스트

4월 22일 작업
1. 로그인 데코레이션(로그인 안하면 해당 기능 접근 못하게)
2. 페이징 하단 페이지 구분은 되는데 한페이지에 표출되는 글 갯수가 안됨 - 방법 물색 중
3. 파일 업로드 여부 리스트 표출

할거
1. 제품 DB 밀어올리기 
2. 주말간 서버 테스트
3. 이력 조회 등 밀릴때 다른거 먼저

4월 25일 작업
1. 파일업로드 여부 리스트에 표출 무리 안됨 - 보류
2. 페이징 문제 수정 중 - 페이징 해결
3. 검색 기능 추가 + 페이징 연결 완료
4. 서버 올리기 탐색 중

4월 26일 작업 
다른 페이지 틀 잡기 - AS 접수, 리스트 완료 
!! 추가기능 
1. 견적 입력시 다양한 품목을 한번에 입력할수있도록 -> 방법, 아이디어 고민 후 다시 해보기....
2. 견적 목록 sorting 팀 / 접수날짜 / 완료날짜 -> 완료 
3. 견적 목록 하단부 미니 대시보드(도표, 차트로 볼수있도록) -> 파이 차트(팀 별 구분) 구현 / 기본적인 기능만 이해됨

서버 테스트 (아마존으로 변경)
가상환경 pip 안됨 원인 불명

발주관리 / 이력관리 / 기타문의


/home/ubuntu/insungcrm/config
   프로젝트 위치

/home/ubuntu/insungcrm/config/venv
 가상환경
 
 
/home/ubuntu/insungcrm/config/venv/bin/gunicorn

# vi /etc/systemd/system/uwsgi.service

[Unit]
Description=uWSGI Emperor
After=syslog.target

[Service]
ExecStart=/usr/local/bin/uwsgi --emperor /etc/uwsgi/vassals/ --uid www-data --gid www-data
RuntimeDirectory = uwsgi
Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target



<div>
    <table class="board">
        <thead>
        {% if insert %}
        <tr class="header" style="text-align:center;">
            <th style="width:5%;">순번</th>
            <th style="width:9%">고객 접수 일자</th>
            <th style="width:10%">제품명</th>
            <th style="width:5%">수량</th>
            <th style="width:15%">비고</th>
        </tr>
        </thead>
        <tbody>

        {% for list in insert %}

        <tr style="text-align:center;">
            <td>{{ forloop.counter }}</td>
            <td>{{ list.rg_date|date:'Y-m-d' }}</td>
            <td><a href="{% url 'isscm:sheet_detail' list.no %}">{{ list.product_name }}</a></td>
            <td>{{ list.cname }}</td>
            <td>{{ list.quantity }}</td>
            <td>{{ list.memo | truncatewords:10}}</td>
        </tr>
        {% endfor %}

        {% else %}

        {% endif %}
        </tbody>
    </table>
</div>


















from django.urls import path
from . import views



app_name = 'asrg'

urlpatterns = [
    path('', views.index, name='index'),
    path('as_insert', views.as_insert, name='as_insert'),
    path('as_list', views.as_list, name='as_list'),
    path('uploadFile/<int:pk>/', views.uploadFile, name='uploadFile'),
    path('as_detail/<int:pk>/', views.as_detail, name='as_detail'),
    path('as_modify/<int:pk>/', views.as_modify, name='as_modify'),
    path('as_delete/<int:pk>/', views.as_delete, name='as_delete'),
    path('assearchResult/', views.assearchResult, name='assearchResult'),
]




5월 2일 작업
1. 서버 올리기 완료
2. 정렬 기능 추가
3. 총 금액 계산 수정
4. 취소 버튼 오류 수정
5. 종결 여부 오류 수정

5월 2일 할거
1. 견적 제품 한번에 여러개 입력
2. 숫자 콤마 
3. 발주 관리
4. 이력 관리
5. 기타 문의

5월 3일 할거
1. 견적 제품 한번에 여러개 입력 - 이건은 보류 DB부터 다 다시짜야할판, 어떻게 넣고 불러올지 감이 안 잡힘
2. 숫자 콤마 -> 총금액 부분만 콤마 미적용
3. 발주 관리
4. 이력 관리
5. 기타 문의

5월 3일 작업
1. 총금액 제외 콤마 추가 완료 - 총금액 콤마 추가는 방법 찾아야함
2. 삭제 기능 오류 수정
3. 견적명 추가

5월 4일 작업
1. 견적 종료건 발주DB로 동시에 저장/업데이트 가능
2. 발주 입력 / 발주 리스트 / 발주 업데이트 / 발주 파일 업,다운 구현
3. 파일업로드 경로 수정 / 각 메뉴별로 저장경로 배정

5월 9일 할거(금주)
1. 이력관리
2. 기타 문의
3. 총금액 콤마 추가 / 업로드 파일 삭제기능(db와 경로상 삭제) / 제품명 검색시 제품db ajax 연동

5월 9일 작업
1. 엔터 submit 방지
2. 제품명 keyup 검색 구현
3. 게시글 업로드 파일 게시글 삭제시 db상에서 파일 삭제되도록 연동 / 실제 경로엔 파일 남아있음
4. 파일 업로드 삭제 기능 추가(견적, 발주, AS)
5. 서버에 db 추가 하기 

5월 10일 할거
1. 이력관리
2. 기타 문의
3. 총금액 콤마 추가 
4. 리스트 엑셀로 다운로드  -> 엑셀 다운로드시 날짜 변환 방법 찾아보기

5월 10일 작업
1. 서버 기존것까지 업데이트 완료
2. 서버에 product_DB 업로드 완료
3. 숫자 콤마 추가 수정완료(javascript 개선)
4. 상세보기에서 파일업로드 여부 표출 / 리스트상에서 표출은 방법 찾아봐야함
5. 엑셀 다운로드  추가중

5월 11일 할거
1. 엑셀 다운로드 완성하기
2. 이력관리 / 기타문의 틀 잡기, 문의




5월 11일 작업
1. 엑셀 다운로드 로직 완성 / 추가하기
2. 반응형 웹(navbar) 구현
3. 파일 다운로드(정식으로) 구현 / 검색된 채로 다운로드 되도록 구현 완료
4. 페이징 순번 재정렬(정상)
5. 서버 업데이트 완료
6. 기타 문의

5월 12일 할거
1. 기타문의 완성하기
2. 댓글 / 답변글 로직 구상

5월 12일 작업
1. 기타문의 기능 추가 중
2. 엔터로 폼 입력 막기
3. 댓글 입력, 리스트 표출 추가완료
4. 대댓글, 댓글 삭제,수정 추가 중

5월 13일 할거
1. 기타문의 완성
2. 댓글 로직 완성

5월 13일 작업
1. 기타문의 수정 에러 수정
2. 댓글 삭제, 수정 저장 완료

5월 16일 할거
1. 이력 관리 메뉴 구상
2. 에러 수정
3. 메인페이지 구상

5월 16일 작업
1. 기타문의 메뉴 완성
2. 댓글 기능 완성(작성, 수정, 삭제, 댓글갯수)
3. 메인 페이지 완성(1일 신규 등록/주간,월간 실적 현황/제품,업체별 견적,발주,as 현황) -> 추가사항 발생시 업데이트 예정
4. 서버 업데이트 완료
5. 메인 페이지, 발주 견적 에러 수정

5월 17일 할거
1. 이력관리 구상(형식 추후 결정 예정, 보류)
2. 에러 수정
3. 메인페이지 추가, 수정 구상 - 메인 페이지 현황 에러 수정, 보완
4. 스케줄러 추가 고려(기능 구현 위주) - 현재는 필요없음
5. 실적현황 팀별/개인별 조회 되도록 - 견적,발주 페이지 현황 추가 


5월 17일 작업
1. 메인페이지, 로그인 에러 수정
2. 유저정보 이름 추가 - 엑셀 다운시 보이도록 구현
3. 견적 목록페이지 - 팀, 담당자별 현황 구현 => 발주 페이지도 추가 예정
4. 발주 페이지 현황,  차트 추가 완료


 
- 메인페이지 구상
1. 견적 / as / 발주 / 기타문의 새로 들어온 갯수 표시? (전일, 등록일자 기준) - 완료
2. 견적 -> 신규/기존 구분하여 표출 
3. 부서별 실적 (견적 / 발주) 월단위 
견적 -> 예상 매출 
발주 -> 매출 확정
4. 제품별 견적,발주 / 업체별 견적,발주



확인사항
-엑셀 다운
1. 엑셀다운 틀이 필요한지 
2. 업체는 어디까지 보여줄것인지

-이력관리
1. 업체 조회가 목적
2. 조회되는 내용 어떤걸 보일지 선택필요
로그인 업체꺼만 보이기
견적/발주 다 보이기? 선택해서 보이기?
원래 리스트에서도 확인가능한데 차별점을 어떻게 둘것인지 / 아니면 리스트에서 확인할지 
리스트 엑셀 다운 지원
3. 이력관리 필요한지

-기타문의 구상
1. 게시판형식으로 구성하여 묻고 댓글이나 답변글로 답하는 형식으로 할지
2. 다른 형식을 할지
=> 게시글 작성, 댓글 달기

- 리스트 -> 디테일(수정, 삭제, 파일 업/다운로드)

1. 문의글 Question
순번 / 제목 / 업체명 / 등록일자 / 유형(단순상담, 기술문의, AS, 기타) / 내용
no / title / cname / rg_date / type / content
댓글 형식으로 짜보기

2. 답변댓글(문의글 상속) comment
순번 / 등록일자 / 등록자 / 내용 / 문의글 순번
no / rg_date / register / contents / que_no
대댓글 계속 달릴수있도록 구현
	
3. 파일 업,다운로드

no, rg_date, rp_date, estitle, product_name, quantity, per_price, total_price, new_old, business_number, cname, memo, option, finish, user_dept


product_db
/home/ubuntu/insung/product.csv
/var/lib/mysql-files/product.csv


Board(member_no=Member.objects.get(pk=member_no),

 // submit시 disabled 속성 지우는 script
 $('form').submit(function(e){
 	$(':disabled').each(function(e){
     		$(this).removeAttr('disabled');
        })
 });
 

product_db
no	center_code	center	warehouse_code	warehouse_name	location	product_code	product_num	scan_code	product_name	account_code	delivery_date

순번	센터코드	센터명	창고코드	창고명	LOCATION	상품코드	상품번호	스캔코드	상품명	거래처코드	입고일자
		
		
순번	완료 일자	발주 명	제품명	수량	개당 단가	총 금액	구분	업체명	의견	담당 팀
no, rp_date, odtitle, product_name, quantity, per_price, total_price, new_old, business_number, cname, memo, option, user_dept, essheet_pk


순번	업체명	고객 접수 일자	회신 완료 일자	제품명	비고	완료 여부
'no', 'cname', 'rg_date', 'rp_date', 'product_name', 'memo', 'option', 'finish'


form 엔터 submit 방지 jquery
 document.addEventListener('keydown', function(event) {
        if (event.keyCode === 13) {
            event.preventDefault();
        };
    }, true);
	




5월 18일 할거
1. as 현황 추가 
주간 / 월간 제품 등록 현황
-> 입력 세분화할지 확인
2. 이력관리 - 신규 3개월 이후 기존으로 변경
-> 일정주기 반복 db 업데이트 진행되도록(1일 기준)
-> 신규 / 기존 현황표, 리스트 
3. 제품 db 중복 항목 제거하여 다시 서버로 올려야함

5월 18일 작업
1. as 현황 추가 완료
2. 각 현황표 합계 추가(발주, 견적, 메인페이지)
3. 제품명 검색창 중복 데이터 제거 - 제품db 수정, 서버 업뎃 완료
4. 서버 업데이트 / 버그 수정
5. 리스트 검색과 현황판 연동 에러 확인 - 수정

5월 19일 할거
1. 발주 이력관리 추가
-> 3개월 지나면 기존으로 변경 / 임박한것 알리기? 
2. db 자동업뎃 구현

5월 19일 작업
1. 발주 이력관리 페이지 만듬 
-> 발주 이력관리는 완료  
-> 자동업데이트 작업중
2. 자동업데이트 crontab 활용 가능한지 테스트 중 -> 정상작동 확인
3. 견적 - 발주 간 상태 연동 에러 수정
4. 자동 db 업데이트 완료
-> 오늘 기준 완료일자 3개월 지난 건은 구분 : 기존으로 변경되도록 구현
-> 매일 오전 9시 업데이트 진행
5. 삭제 기능 버그 수정

5월 20일 할거
1. 이력관리 수정, 추가
2. 접수일로부터 1달 지나도 완료 안되면 리스트에 표출
3. 스케줄러(할일) 구현 작업 - 필요하지않음
4. 코드 간결화
5. 크롤링 테스트 

5월 20일 작업
1. 견적, AS 한달이상 미처리건 리스트 추가
-> 클릭시 넘어가도록  / 에러수정
2. 접속 url 수정 / 이제 서버명(ip)입력하여 접속 가능
3. 크롤링  -


5월 23일 작업
1. 크롤링 테스트
2. 리스트 불러오고 저장까지 가능

5월 24일 작업
1. 크롤링 db 저장 / 표출 가능
2. scm / crm 관련 회의 
-> crm 구체적인 계획은 이번주내에 다시 회의 예정
3. 백엔드 위주로 작업 할 예정

5월 25일 작업
1. 크롤링 / db 저장 정상 수정완
2. 등록시간 / 뉴스글 게시 시간 불러와 저장 / 시간은 갱신구현
3. 본문 내용 불러와 표출 구현

5월 26일 작업
1. 회원가입 / 로그인 구현
2. 검색창 구현 
3. 댓글 입력 구현 중
4. 리스트 검색 조건 추가
---------------
5. scm 방향 재구성
DB / 로직 수정 중 
main - sub DB 를 활용해서 견적, 발주 건 하나로 묶는중


5월 27일 작업
1. db 새로 구축 - 연계 로직 구현
2. 입력/디테일뷰 까지 완료  - 리스트 예정
3. 리스트 완료 
4. 낱개 제품 입력 완료 - 입력 / 수정 / 삭제 추가 완료
5. 메인 디테일뷰에서 총금액 합계 표출

5월 30일 작업
1. 계정별 차등권한 (본사 - 전체 권한 / 업체 - 자기꺼 조회까지만 가능)
2. 기존 db에서 새로운 db로 이동 - 메인페이지 대쉬보드 변경 완료
3. 엑셀 다운로드 수정 - 완료 / 메인, 서브 엑셀 다운 구현완료 / 엑셀 폼 확인
4. 검색시 sub 입력된 제품별 시리얼 검색 가능







       {% if login_session == 'insung' %}
            <option value="cname" id="cname">업체명</option>
            {% endif %}
            <option value="rg_date" id="rg_date">고객 접수 일자</option>
            <option value="rp_date" id="rp_date">회신 완료 일자</option>
            <option value="product_name" id="product_name">제품명</option>
            <option value="finish" id="finish">완료 여부</option>
            <option value="all" id="all">전체</option>



<option value="odtitle" id="odtitle">발주명</option>
            <option value="product_name" id="product_name">제품명</option>
            <option value="new_old" id="new_old">구분</option>
            <option value="cname" id="cname">업체명</option>
            <option value="user_dept" id="user_dept">부서명</option>
            <option value="all" id="all">전체</option>


<option value="estitle" id="estitle">견적명</option>
            <option value="new_old" id="new_old">구분</option>
            <option value="cname" id="cname">업체명</option>
            <option value="finish" id="finish">종결 여부</option>
            {% if login_session == 'insung' %}
            <option value="user_dept" id="user_dept">부서명</option>
            {% endif %}
            <option value="all" id="all">전체</option>
			
<option value="rg_date" id="rg_date">등록 일자</option>
            <option value="cname" id="cname">업체명</option>
            <option value="type" id="type">유형</option>
            <option value="all" id="all">전체</option>


 if 'q' in request.GET:
        query = request.GET.get('q')
        print('get?')
        nlist = newsList.objects.all().filter(
            Q(news_title__icontains=query) | Q(writing__icontains=query), rg_date__gte=date.today()).order_by('rg_date')


mysql> SET foreign_key_checks = 0; // 체크 해제
mysql> DELETE TABLE [테이블명] or TRUNCATE [테이블명]
mysql> SET foreign_key_checks = 1; // 다시 체크 설정

, {"class":"date is_new"}

, 'time': n.find('dd').get('span').strip()

이력 관리 페이지 구상
발주 데이터 활용
1. 신규 등록건 3개월 뒤에 기존 으로 자동변경
-> 1일 단위 자동 db 업데이트 로직 구현 예정
2. 신규 / 기존 현황표 
-> 월단위 건수 / 금액 / 업체 별 현황 
3. 엑셀 다운로드 



#검색창 코드
        if 'q' in request.GET:
            query = request.GET.get('q')
            searchlist = EstimateSheet.objects.all().filter(
                Q(product_name__icontains=query) | Q(new_old__icontains=query) | Q(cname__icontains=query) | Q(
                    finish__icontains=query) | Q(estitle__icontains=query))
            print("여기 왓나")
            page = request.GET.get('page', '1')
            paginator = Paginator(searchlist, 7)
            page_obj = paginator.get_page(page)
            print("지나갓나")
            return render(request, 'isscm/sheet_list.html',
                          {'query': query, 'page_obj': page_obj, 'login_session': login_session})
						  
						  
		company_sheet = EstimateSheet.objects.all().order_by('-rg_date', 'finish', '-user_dept')
		
		
		
		 print("리스트 조회 겸 목록 조회")
                if 'q' in request.GET:
                    query = request.GET.get('q')
                    company_sheet = EstimateSheet.objects.all().filter(
                        Q(product_name__icontains=query) | Q(new_old__icontains=query) | Q(cname__icontains=query) | Q(
                            finish__icontains=query) | Q(estitle__icontains=query)).order_by('-rg_date', 'finish', '-user_dept')
                else:
                    company_sheet = EstimateSheet.objects.all().order_by('-rg_date', 'finish', '-user_dept')
# 발주 리스트 검색
def ordersearchResult(request):
    login_session = request.session.get('login_session')
    user_name = request.session.get('user_name')
    searchlist = None
    query = None
    if 'q' in request.GET:
        query = request.GET.get('q')
        print('quer? : ' + query)
        searchlist = Ordersheet.objects.all().filter(
            Q(product_name__icontains=query) | Q(new_old__icontains=query) | Q(cname__icontains=query) | Q(
                odtitle__icontains=query) |
            Q(user_dept__icontains=query))
        print("여기 왓나")
        page = request.GET.get('page', '1')
        paginator = Paginator(searchlist, 7)
        page_obj = paginator.get_page(page)
        print("지나갓나")
        return render(request, 'isscm/order_list.html',
                      {'query': query, 'page_obj': page_obj, 'login_session': login_session, 'user_name': user_name})
    else:
        print('post로 왓나')
        query = request.GET.get('query')
        print(query)
        searchlist = Ordersheet.objects.all().filter(
            Q(product_name__icontains=query) | Q(new_old__icontains=query) | Q(cname__icontains=query) | Q(
                odtitle__icontains=query) |
            Q(user_dept__icontains=query))
        page = request.GET.get('page', '1')
        paginator = Paginator(searchlist, 7)
        page_obj = paginator.get_page(page)
        context = {'query': query, 'page_obj': page_obj, 'login_session': login_session, 'user_name': user_name}
        print('포스트 나갓나')
    return render(request, 'isscm/order_list.html', context)


# 견적 리스트 검색
def searchResult(request):
    login_session = request.session.get('login_session')
    searchlist = None
    query = None
    if request.GET:
        if 'q' in request.GET:
            query = request.GET.get('q')
            searchlist = EstimateSheet.objects.all().filter(
                Q(product_name__icontains=query) | Q(new_old__icontains=query) | Q(cname__icontains=query) | Q(
                    finish__icontains=query) | Q(estitle__icontains=query))
            print("여기 왓나")
            page = request.GET.get('page', '1')
            paginator = Paginator(searchlist, 7)
            page_obj = paginator.get_page(page)
            print("지나갓나")
            return render(request, 'isscm/sheet_list.html',
                          {'query': query, 'page_obj': page_obj, 'login_session': login_session})
    else:
        print('없었다')
        redirect('isscm:sheet_list')


# 리스트 검색2
def assearchResult(request):
    login_session = request.session.get('login_session')
    searchlist = None
    query = None
    if 'q' in request.GET:
        query = request.GET.get('q')
        print('get?')
        searchlist = ASsheet.objects.all().filter(
            Q(product_name__icontains=query) | Q(memo__icontains=query) | Q(cname__icontains=query) | Q(
                finish__icontains=query) | Q(option__icontains=query))
        print("여기 왓나")
        page = request.GET.get('page', '1')
        paginator = Paginator(searchlist, 5)
        page_obj = paginator.get_page(page)
        print("지나갓나")
        return render(request, 'assheet/as_list.html',
                      {'query': query, 'page_obj': page_obj, 'login_session': login_session})
    else:
        print('post로 왓나')
        query = request.GET.get('query')
        print(query)
        searchlist = ASsheet.objects.all().filter(
            Q(product_name__icontains=query) | Q(memo__icontains=query) | Q(cname__icontains=query) | Q(
                finish__icontains=query) | Q(option__icontains=query))
        page = request.GET.get('page', '1')
        paginator = Paginator(searchlist, 5)
        page_obj = paginator.get_page(page)
        context = {'query': query, 'page_obj': page_obj, 'login_session': login_session}
        print('포스트 나갓나')
    return render(request, 'assheet/as_list.html', context)